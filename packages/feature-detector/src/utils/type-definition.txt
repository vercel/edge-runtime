/// <reference no-default-lib="true"/>

declare global {
  // -----------------------------------
  // Copied from lib.es5.d.ts

  type Awaited<T> = T extends null | undefined
    ? T // special case for `null | undefined` when not in `--strictNullChecks` mode
    : T extends object & { then(onfulfilled: infer F, ...args: infer _): any } // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped
    ? F extends (value: infer V, ...args: infer _) => any // if the argument to `then` is callable, extracts the first argument
      ? Awaited<V> // recursively unwrap the value
      : never // the argument to `then` was not callable
    : T // non-object or non-thenable

  // -----------------------------------
  // Copied from lib.es2015.promise.d.ts

  interface PromiseConstructor {
    /**
     * A reference to the prototype.
     */
    readonly prototype: Promise<any>

    /**
     * Creates a new Promise.
     * @param executor A callback used to initialize the promise. This callback is passed two arguments:
     * a resolve callback used to resolve the promise with a value or the result of another promise,
     * and a reject callback used to reject the promise with a provided reason or error.
     */
    new <T>(
      executor: (
        resolve: (value: T | PromiseLike<T>) => void,
        reject: (reason?: any) => void
      ) => void
    ): Promise<T>

    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param values An array of Promises.
     * @returns A new Promise.
     */
    all<T extends readonly unknown[] | []>(
      values: T
    ): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>

    // see: lib.es2015.iterable.d.ts
    // all<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>;

    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param values An array of Promises.
     * @returns A new Promise.
     */
    race<T extends readonly unknown[] | []>(
      values: T
    ): Promise<Awaited<T[number]>>

    // see: lib.es2015.iterable.d.ts
    // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>;

    /**
     * Creates a new rejected promise for the provided reason.
     * @param reason The reason the promise was rejected.
     * @returns A new rejected Promise.
     */
    reject<T = never>(reason?: any): Promise<T>

    /**
     * Creates a new resolved promise.
     * @returns A resolved promise.
     */
    resolve(): Promise<void>
    /**
     * Creates a new resolved promise for the provided value.
     * @param value A promise.
     * @returns A promise whose internal state matches the provided promise.
     */
    resolve<T>(value: T): Promise<Awaited<T>>
    /**
     * Creates a new resolved promise for the provided value.
     * @param value A promise.
     * @returns A promise whose internal state matches the provided promise.
     */
    resolve<T>(value: T | PromiseLike<T>): Promise<Awaited<T>>
  }

  declare var Promise: PromiseConstructor

  // -----------------------------------
  // copied from lib.es2018.promise.d.ts

  /**
   * Represents the completion of an asynchronous operation
   */
  interface Promise<T> {
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>
  }

  // -----------------------------------
  // copied from lib.es2020.promise.d.ts

  interface PromiseFulfilledResult<T> {
    status: 'fulfilled'
    value: T
  }

  interface PromiseRejectedResult {
    status: 'rejected'
    reason: any
  }

  type PromiseSettledResult<T> =
    | PromiseFulfilledResult<T>
    | PromiseRejectedResult

  interface PromiseConstructor {
    /**
     * Creates a Promise that is resolved with an array of results when all
     * of the provided Promises resolve or reject.
     * @param values An array of Promises.
     * @returns A new Promise.
     */
    allSettled<T extends readonly unknown[] | []>(
      values: T
    ): Promise<{
      -readonly [P in keyof T]: PromiseSettledResult<Awaited<T[P]>>
    }>

    /**
     * Creates a Promise that is resolved with an array of results when all
     * of the provided Promises resolve or reject.
     * @param values An array of Promises.
     * @returns A new Promise.
     */
    allSettled<T>(
      values: Iterable<T | PromiseLike<T>>
    ): Promise<PromiseSettledResult<Awaited<T>>[]>
  }

  // -----------------------------------
  // Copied from lib.dom.d.ts

  /** This Fetch API interface represents the response to a request. */
  interface Response extends Body {
    readonly headers: Headers
    readonly ok: boolean
    readonly redirected: boolean
    readonly status: number
    readonly statusText: string
    readonly type: ResponseType
    readonly url: string
    clone(): Response
  }

  var Response: {
    prototype: Response
    new (body?: BodyInit | null, init?: ResponseInit): Response
    error(): Response
    redirect(url: string | URL, status?: number): Response

    // -----------------------------------
    // adding json which is not documented yet
    // https://fetch.spec.whatwg.org/#response-class
    json(data?: any, init?: ResponseInit): Response
  }
}

export {}
